const fruits = ['üëë', 'A', 'K', 'Q', 'J', '7', '‚ô¶', '‚ô†', '‚ô£', '‚ô•', 'üçã', 'üçí', 'üçá', 'üçì']; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
const reels = document.querySelectorAll('.reel');
const spinButton = document.getElementById('spin-button');
const scoreElement = document.getElementById('score');
let isSpinning = false;
let score = 0;
let stoppedReels = 0;
let spinningReelIndex = -1; // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–∞—â–∞—é—â–µ–≥–æ—Å—è –±–∞—Ä–∞–±–∞–Ω–∞
let currentReelIndex = 0;

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const REEL_HEIGHT = 100; // –í—ã—Å–æ—Ç–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
const TOTAL_SYMBOLS = 15; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–∫–Ω–µ
const SPIN_DURATION = 8; // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
const STOP_DURATION = 1.5; // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
const SPIN_SPEED = 5; // –°–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è (–ø–∏–∫—Å–µ–ª–µ–π –≤ —Å–µ–∫—É–Ω–¥—É)
const MAX_TRANSLATION = 5000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –ø–æ Y

function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}

function createReelStrip() {
    const strip = document.createElement('div');
    strip.className = 'reel-strip';
    
    // –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–µ –∫–æ–ø–∏–π –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è
    const totalSets = 10;
    
    for (let i = 0; i < totalSets; i++) {
        const shuffledFruits = [...fruits];
        shuffleArray(shuffledFruits); // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–±–æ—Ä–∞
        shuffledFruits.forEach(fruit => {
            const item = document.createElement('div');
            item.className = 'reel-item';
            item.textContent = fruit;
            strip.appendChild(item);
        });
    }
    
    return strip;
}

document.addEventListener('DOMContentLoaded', () => {
    reels.forEach(reel => {
        const strip = createReelStrip();
        reel.appendChild(strip);
    });
});

function getRandomFruit() {
    return fruits[Math.floor(Math.random() * fruits.length)];
}

function updateScore(points) {
    score += points;
    scoreElement.textContent = score;
}

function getCenterFruit(reel) {
    const strip = reel.querySelector('.reel-strip');
    const items = strip.querySelectorAll('.reel-item');
    const reelRect = reel.getBoundingClientRect();
    const reelCenter = reelRect.top + reelRect.height / 2;
    
    // –ù–∞—Ö–æ–¥–∏–º —Ñ—Ä—É–∫—Ç, –±–ª–∏–∂–∞–π—à–∏–π –∫ —Ü–µ–Ω—Ç—Ä—É –±–∞—Ä–∞–±–∞–Ω–∞
    let closestItem = null;
    let minDistance = Infinity;
    
    items.forEach(item => {
        const itemRect = item.getBoundingClientRect();
        const itemCenter = itemRect.top + itemRect.height / 2;
        const distance = Math.abs(itemCenter - reelCenter);
        
        if (distance < minDistance) {
            minDistance = distance;
            closestItem = item;
        }
    });
    
    return closestItem ? closestItem.textContent : fruits[0];
}

function countMatchingFruits(centerFruits) {
    const fruitCounts = {};
    let maxCount = 0;
    let winningFruit = null;

    // Count occurrences of each fruit
    centerFruits.forEach(fruit => {
        if (fruit) {
            fruitCounts[fruit] = (fruitCounts[fruit] || 0) + 1;
            if (fruitCounts[fruit] > maxCount) {
                maxCount = fruitCounts[fruit];
                winningFruit = fruit;
            }
        }
    });

    return { count: maxCount, fruit: winningFruit };
}

function checkWin() {
    const centerFruits = Array.from(reels).map(reel => getCenterFruit(reel));
    const fruitCounts = {};
    let maxCount = 0;
    let winningFruit = null;

    // –ü–æ–¥—Å—á–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ñ—Ä—É–∫—Ç–æ–≤
    centerFruits.forEach(fruit => {
        if (fruit) {
            fruitCounts[fruit] = (fruitCounts[fruit] || 0) + 1;
            if (fruitCounts[fruit] > maxCount) {
                maxCount = fruitCounts[fruit];
                winningFruit = fruit;
            }
        }
    });

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞
    let points = 0;
    let message = '';

    switch(maxCount) {
        case 5:
            points = 10000;
            message = `üéâ –î–ñ–ï–ö–ü–û–¢! 5 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ñ—Ä—É–∫—Ç–æ–≤! +${points} –æ—á–∫–æ–≤!`;
            break;
        case 4:
            points = 200;
            message = `üéä –û—Ç–ª–∏—á–Ω–æ! 4 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ñ—Ä—É–∫—Ç–∞! +${points} –æ—á–∫–æ–≤!`;
            break;
        case 3:
            points = 150;
            message = `üéà –•–æ—Ä–æ—à–æ! 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ñ—Ä—É–∫—Ç–∞! +${points} –æ—á–∫–æ–≤!`;
            break;
        case 2:
            points = 50;
            message = `‚ú® 2 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ñ—Ä—É–∫—Ç–∞! +${points} –æ—á–∫–æ–≤!`;
            break;
        default:
            message = '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!';
    }

    if (points > 0) {
        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Ñ—Ä—É–∫—Ç–æ–≤
        reels.forEach((reel, index) => {
            if (centerFruits[index] === winningFruit) {
                const items = reel.querySelectorAll('.reel-item');
                const centerItem = items[Math.floor(items.length / 2)];
                if (centerItem) {
                    centerItem.classList.add('win');
                    setTimeout(() => centerItem.classList.remove('win'), 1500);
                }
            }
        });

        // –û—Å–æ–±–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –¥–∂–µ–∫–ø–æ—Ç–∞
        if (points === 10000) {
            document.body.classList.add('jackpot');
            setTimeout(() => document.body.classList.remove('jackpot'), 3000);
        }

        updateScore(points);
    }
    
    showWinModal(message, centerFruits);
}

function spinReel(reel) {
    const strip = reel.querySelector('.reel-strip');
    strip.style.transition = 'none';
    strip.style.transform = 'translateY(0)';
    void strip.offsetHeight;
    strip.classList.add('spinning');
    console.log(`–ë–∞—Ä–∞–±–∞–Ω [${reel.dataset.index}] –Ω–∞—á–∞–ª –≤—Ä–∞—â–µ–Ω–∏–µ`);
}

function stopNextReel() {
    if (currentReelIndex < reels.length) {
        const reel = reels[currentReelIndex];
        const strip = reel.querySelector('.reel-strip');
        
        if (!strip) return;
        
        strip.classList.remove('spinning');
        
        const fruitSetHeight = REEL_HEIGHT * fruits.length;
        const rotations = Math.floor(Math.random() * 2) + 2;
        const symbolIndex = Math.floor(Math.random() * fruits.length);
        const finalPosition = -(rotations * fruitSetHeight) - (symbolIndex * REEL_HEIGHT);
        
        strip.style.transition = `transform ${STOP_DURATION}s cubic-bezier(0.5, 0, 0.5, 1)`;
        strip.style.transform = `translateY(${finalPosition}px)`;
        
        setTimeout(() => {
            const centerFruit = getCenterFruit(reel);
            console.log(`–ë–∞—Ä–∞–±–∞–Ω [${reel.dataset.index}] –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è - –≤—ã–ø–∞–ª–æ [${centerFruit}]`);
            
            currentReelIndex++;
            if (currentReelIndex === reels.length) {
                isSpinning = false;
                spinButton.textContent = 'SPIN';
                spinningReelIndex = -1;
                const finalFruits = Array.from(reels).map(reel => getCenterFruit(reel));
                console.log('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í–∞—à–∏ —Å–ª–æ—Ç—ã:', finalFruits.join(', '));
                checkWin();
            }
        }, STOP_DURATION * 1000);
    }
}

function updateResults(message, fruits = []) {
    const resultMessage = document.querySelector('.result-message');
    const resultFruits = document.querySelector('.result-fruits');
    
    resultMessage.textContent = message;
    if (fruits.length > 0) {
        resultFruits.innerHTML = fruits.map(fruit => `<span>${fruit}</span>`).join('');
    }
}

function showWinModal(message, fruits) {
    updateResults(message, fruits);
    resetReelPositions();
}

function handleButtonClick() {
    if (!isSpinning) {
        console.log('=== –ù–û–í–ê–Ø –ò–ì–†–ê ===');
        isSpinning = true;
        currentReelIndex = 0;
        spinningReelIndex = -1;
        spinButton.textContent = 'STOP';
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫ –ø—Ä–∏ –Ω–æ–≤–æ–π –∏–≥—Ä–µ
        fireworks.stop();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        updateResults('–ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã...');
        
        // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        resetReelPositions();
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        setTimeout(() => {
            // –û—á–∏—â–∞–µ–º –≤—Å–µ –±–∞—Ä–∞–±–∞–Ω—ã –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∏–≥—Ä–æ–π
            reels.forEach(reel => {
                const strips = reel.querySelectorAll('.reel-strip');
                strips.forEach(strip => strip.remove());
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–∞—Ä–∞–±–∞–Ω
                const newStrip = createReelStrip();
                reel.appendChild(newStrip);
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ
                void newStrip.offsetHeight; // –§–æ—Ä—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É
                newStrip.classList.add('spinning');
                console.log(`–ë–∞—Ä–∞–±–∞–Ω [${reel.dataset.index}] –Ω–∞—á–∞–ª –≤—Ä–∞—â–µ–Ω–∏–µ`);
            });
        }, 100);
    } else {
        stopNextReel();
    }
}

function resetReelPositions() {
    reels.forEach((reel, index) => {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª–æ—Å–∫–∏
        const oldStrips = reel.querySelectorAll('.reel-strip');
        oldStrips.forEach(strip => strip.remove());
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–ª–æ—Å–∫—É —Å –Ω–∞—á–∞–ª—å–Ω—ã–º —Ñ—Ä—É–∫—Ç–æ–º
        const newStrip = createReelStrip();
        reel.appendChild(newStrip);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∏–ª–∏ –∏ –∫–ª–∞—Å—Å—ã
        newStrip.style.transform = 'translateY(0)';
        newStrip.classList.remove('spinning');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ STOP
        const indicator = reel.querySelector('.reel-indicator');
        if (indicator) {
            indicator.textContent = 'STOP';
        }
        
        console.log(`–ë–∞—Ä–∞–±–∞–Ω [${index}] —Å–±—Ä–æ—à–µ–Ω –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ`);
    });
}

function startNewGame() {
    console.log('=== –ù–û–í–ê–Ø –ò–ì–†–ê ===');
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –±–∞—Ä–∞–±–∞–Ω—ã
    resetReelPositions();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    isSpinning = true;
    currentReelIndex = 0;
    spinningReelIndex = -1;
    spinButton.textContent = 'STOP';
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫ –ø—Ä–∏ –Ω–æ–≤–æ–π –∏–≥—Ä–µ
    fireworks.stop();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    updateResults('–ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã...', [], false);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≤—Ä–∞—â–µ–Ω–∏—è
    setTimeout(() => {
        reels.forEach(reel => {
            const strip = reel.querySelector('.reel-strip');
            if (strip) {
                strip.classList.add('spinning');
                console.log(`–ë–∞—Ä–∞–±–∞–Ω [${reel.dataset.index}] –Ω–∞—á–∞–ª –≤—Ä–∞—â–µ–Ω–∏–µ`);
            }
        });
    }, 100);
}

function finishGame() {
    isSpinning = false;
    spinButton.textContent = 'SPIN';
    
    const symbols = Array.from(reels).map(reel => {
        const symbol = reel.querySelector('.reel-item');
        return symbol ? symbol.textContent : '';
    });
    
    // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    const symbolCounts = {};
    symbols.forEach(symbol => {
        symbolCounts[symbol] = (symbolCounts[symbol] || 0) + 1;
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    let points = 0;
    let message = '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–æ–Ω—É
    if (symbolCounts['üëë'] >= 3) {
        points = 200;
        message = '–î–∂–µ–∫–ø–æ—Ç! –¢—Ä–∏ –∫–æ—Ä–æ–Ω—ã!';
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ä—Ç
    else if (hasCardCombination(symbols, 'A', 3)) {
        points = 150;
        message = '–¢—Ä–∏ —Ç—É–∑–∞!';
    }
    else if (hasCardCombination(symbols, 'K', 3)) {
        points = 100;
        message = '–¢—Ä–∏ –∫–æ—Ä–æ–ª—è!';
    }
    else if (hasCardCombination(symbols, 'Q', 3)) {
        points = 75;
        message = '–¢—Ä–∏ –¥–∞–º—ã!';
    }
    else if (hasCardCombination(symbols, 'J', 3)) {
        points = 50;
        message = '–¢—Ä–∏ –≤–∞–ª–µ—Ç–∞!';
    }
    else if (hasCardCombination(symbols, '7', 3)) {
        points = 40;
        message = '–¢—Ä–∏ —Å–µ–º–µ—Ä–∫–∏!';
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä—É–∫—Ç—ã
    else if (symbolCounts['üçí'] >= 3) {
        points = 30;
        message = '–¢—Ä–∏ –≤–∏—à–Ω–∏!';
    }
    else if (symbolCounts['üçá'] >= 3) {
        points = 25;
        message = '–¢—Ä–∏ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞!';
    }
    else if (symbolCounts['üçì'] >= 3) {
        points = 20;
        message = '–¢—Ä–∏ –∫–ª—É–±–Ω–∏–∫–∏!';
    }
    else if (symbolCounts['üçã'] >= 3) {
        points = 15;
        message = '–¢—Ä–∏ –ª–∏–º–æ–Ω–∞!';
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Ç–∏
    else if (symbolCounts['‚ô•'] >= 3) {
        points = 10;
        message = '–¢—Ä–∏ —á–µ—Ä–≤—ã!';
    }
    else if (symbolCounts['‚ô¶'] >= 3) {
        points = 8;
        message = '–¢—Ä–∏ –±—É–±–Ω—ã!';
    }
    else if (symbolCounts['‚ô†'] >= 3) {
        points = 5;
        message = '–¢—Ä–∏ –ø–∏–∫–∏!';
    }
    else if (symbolCounts['‚ô£'] >= 3) {
        points = 5;
        message = '–¢—Ä–∏ —Ç—Ä–µ—Ñ—ã!';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–∏–≥—Ä—ã—à
    if (points > 0) {
        score += points;
        document.getElementById('score').textContent = score;
        showWinModal(message, symbols);
        fireworks.start();
    } else {
        updateResults('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', symbols, false);
        fireworks.stop();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
function hasCardCombination(symbols, cardValue, count) {
    return symbols.filter(s => s === cardValue).length >= count;
}

function startFireworks() {
    const pyro = document.querySelector('.pyro');
    pyro.classList.add('active');
}

function stopFireworks() {
    const pyro = document.querySelector('.pyro');
    pyro.classList.remove('active');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
document.addEventListener('keydown', (event) => {
    if (event.code === 'Escape') {
        const modal = document.querySelector('.modal');
        if (modal.classList.contains('show')) {
            modal.classList.remove('show');
            resetReelPositions();
        }
    }
});

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
document.querySelector('.modal').addEventListener('click', function(e) {
    // –ö–ª–∏–∫ —Ç–æ–ª—å–∫–æ –ø–æ —Å–∞–º–æ–π –ø–∞–Ω–µ–ª–∏ (–Ω–µ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É) –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –µ—ë
    if (e.target === this) {
        this.classList.remove('show');
        resetReelPositions();
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
spinButton.addEventListener('click', handleButtonClick);
document.addEventListener('keydown', (event) => {
    if (event.code === 'Space') {
        event.preventDefault();
        const modal = document.querySelector('.modal');
        if (modal.classList.contains('show')) {
            modal.classList.remove('show');
            resetReelPositions();
        } else if (isSpinning) {
            stopNextReel();
        } else {
            handleButtonClick();
        }
    }
});
